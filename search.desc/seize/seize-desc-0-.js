searchState.loadedDescShard("seize", 0, "<code>seize</code>\nA concurrent garbage collector.\nA guard that enables protected loads of concurrent objects.\nA guard that keeps the current thread marked as active.\nA guard that protects objects for it’s lifetime, …\nSets the number of objects that must be in a batch before …\nReturns the collector this guard was created from.\nReturns the collector this guard was created from.\nReturns the collector this guard was created from.\nStores a value into the pointer if the current value is …\nStores a value into the pointer if the current value is …\nStores a value into the pointer if the current value is …\nStores a value into the pointer if the current value is …\nRetires a value, running <code>reclaim</code> when no threads hold a …\nRetires a value, running <code>reclaim</code> when no threads hold a …\nRetires a value, running <code>reclaim</code> when no threads hold a …\nMarks the current thread as active, returning a guard that …\nCreate an owned guard that protects objects for its …\nChecks if both references point to the same collector.\nFlush any retired values in the local batch.\nFlush any retired values in the local batch.\nFlush any retired values in the local batch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA quick-start guide for working with <code>seize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new collector.\nProtects the load of an atomic pointer.\nProtects the load of an atomic pointer.\nCommon memory reclaimers.\nReclaim any values that have been retired.\nRefreshes the guard.\nRefreshes the guard.\nRefreshes the guard.\nRetires a value, running <code>reclaim</code> when no threads hold a …\nStores a value into the pointer, returning the protected …\nStores a value into the pointer, returning the protected …\nReturns a numeric identifier for the current thread.\nReturns a numeric identifier for the current thread.\nReturns a numeric identifier for the current thread.\nReclaims memory allocated with <code>Box</code>.\nReclaims memory by dropping the value in place.")