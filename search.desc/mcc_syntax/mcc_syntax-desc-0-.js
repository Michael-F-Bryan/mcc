searchState.loadedDescShard("mcc_syntax", 0, "A strongly-typed AST for C, built using [<code>type-sitter</code>].\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTyped node <code>abstract_array_declarator</code>\nTyped node <code>_abstract_declarator</code>\nTyped node <code>abstract_function_declarator</code>\nTyped node <code>abstract_parenthesized_declarator</code>\nTyped node <code>abstract_pointer_declarator</code>\nTyped node <code>alignas_qualifier</code>\nTyped node <code>alignof_expression</code>\nTyped node <code>argument_list</code>\nTyped node <code>array_declarator</code>\nTyped node <code>assignment_expression</code>\nTyped node <code>attribute</code>\nTyped node <code>attribute_declaration</code>\nTyped node <code>attribute_specifier</code>\nTyped node <code>attributed_declarator</code>\nTyped node <code>attributed_statement</code>\nTyped node <code>binary_expression</code>\nTyped node <code>bitfield_clause</code>\nTyped node <code>break_statement</code>\nTyped node <code>call_expression</code>\nTyped node <code>case_statement</code>\nTyped node <code>cast_expression</code>\nTyped node <code>char_literal</code>\nTyped node <code>character</code>\nTyped node <code>comma_expression</code>\nTyped node <code>comment</code>\nTyped node <code>compound_literal_expression</code>\nTyped node <code>compound_statement</code>\nTyped node <code>concatenated_string</code>\nTyped node <code>conditional_expression</code>\nTyped node <code>continue_statement</code>\nTyped node <code>declaration</code>\nTyped node <code>declaration_list</code>\nTyped node <code>_declarator</code>\nTyped node <code>do_statement</code>\nTyped node <code>else_clause</code>\nTyped node <code>enum_specifier</code>\nTyped node <code>enumerator</code>\nTyped node <code>enumerator_list</code>\nTyped node <code>escape_sequence</code>\nTyped node <code>expression</code>\nTyped node <code>expression_statement</code>\nTyped node <code>extension_expression</code>\nTyped node <code>false</code>\nTyped node <code>field_declaration</code>\nTyped node <code>field_declaration_list</code>\nTyped node <code>_field_declarator</code>\nTyped node <code>field_designator</code>\nTyped node <code>field_expression</code>\nTyped node <code>field_identifier</code>\nTyped node <code>for_statement</code>\nTyped node <code>function_declarator</code>\nTyped node <code>function_definition</code>\nTyped node <code>generic_expression</code>\nTyped node <code>gnu_asm_clobber_list</code>\nTyped node <code>gnu_asm_expression</code>\nTyped node <code>gnu_asm_goto_list</code>\nTyped node <code>gnu_asm_input_operand</code>\nTyped node <code>gnu_asm_input_operand_list</code>\nTyped node <code>gnu_asm_output_operand</code>\nTyped node <code>gnu_asm_output_operand_list</code>\nTyped node <code>gnu_asm_qualifier</code>\nTyped node <code>goto_statement</code>\nTyped node <code>identifier</code>\nTyped node <code>if_statement</code>\nTyped node <code>init_declarator</code>\nTyped node <code>initializer_list</code>\nTyped node <code>initializer_pair</code>\nTyped node <code>labeled_statement</code>\nTyped node <code>linkage_specification</code>\nTyped node <code>macro_type_specifier</code>\nTyped node <code>ms_based_modifier</code>\nTyped node <code>ms_call_modifier</code>\nTyped node <code>ms_declspec_modifier</code>\nTyped node <code>ms_pointer_modifier</code>\nTyped node <code>ms_restrict_modifier</code>\nTyped node <code>ms_signed_ptr_modifier</code>\nTyped node <code>ms_unaligned_ptr_modifier</code>\nTyped node <code>ms_unsigned_ptr_modifier</code>\nTyped node <code>null</code>\nTyped node <code>number_literal</code>\nTyped node <code>offsetof_expression</code>\nTyped node <code>parameter_declaration</code>\nTyped node <code>parameter_list</code>\nTyped node <code>parenthesized_declarator</code>\nTyped node <code>parenthesized_expression</code>\nTyped node <code>pointer_declarator</code>\nTyped node <code>pointer_expression</code>\nTyped node <code>preproc_arg</code>\nTyped node <code>preproc_call</code>\nTyped node <code>preproc_def</code>\nTyped node <code>preproc_defined</code>\nTyped node <code>preproc_directive</code>\nTyped node <code>preproc_elif</code>\nTyped node <code>preproc_elifdef</code>\nTyped node <code>preproc_else</code>\nTyped node <code>preproc_function_def</code>\nTyped node <code>preproc_if</code>\nTyped node <code>preproc_ifdef</code>\nTyped node <code>preproc_include</code>\nTyped node <code>preproc_params</code>\nTyped node <code>primitive_type</code>\nTyped node <code>return_statement</code>\nTyped node <code>seh_except_clause</code>\nTyped node <code>seh_finally_clause</code>\nTyped node <code>seh_leave_statement</code>\nTyped node <code>seh_try_statement</code>\nTyped node <code>sized_type_specifier</code>\nTyped node <code>sizeof_expression</code>\nTyped node <code>statement</code>\nTyped node <code>statement_identifier</code>\nTyped node <code>storage_class_specifier</code>\nTyped node <code>string_content</code>\nTyped node <code>string_literal</code>\nTyped node <code>struct_specifier</code>\nTyped node <code>subscript_designator</code>\nTyped node <code>subscript_expression</code>\nTyped node <code>subscript_range_designator</code>\nTyped node <code>switch_statement</code>\nTyped node <code>system_lib_string</code>\nTyped node <code>translation_unit</code>\nTyped node <code>true</code>\nTyped node <code>_type_declarator</code>\nTyped node <code>type_definition</code>\nTyped node <code>type_descriptor</code>\nTyped node <code>type_identifier</code>\nTyped node <code>type_qualifier</code>\nTyped node <code>type_specifier</code>\nTyped node <code>unary_expression</code>\nTyped node <code>union_specifier</code>\nTyped node <code>update_expression</code>\nTyped node <code>variadic_parameter</code>\nTyped node <code>while_statement</code>\nGet the node’s only not-extra named child, if it has one.\nGet the field <code>alternative</code>.\nGet the optional field <code>alternative</code>.\nGet the optional field <code>alternative</code>.\nGet the optional field <code>alternative</code>.\nGet the optional field <code>alternative</code>.\nGet the optional field <code>alternative</code>.\nGet the field <code>argument</code>.\nGet the field <code>argument</code>.\nGet the optional field <code>argument</code>.\nGet the field <code>argument</code>.\nGet the field <code>argument</code>.\nGet the field <code>argument</code>.\nGet the node’s only non-field not-extra named child, if …\nGet the node’s only not-extra named child.\nGet the node’s only not-extra named child.\nGet the field <code>arguments</code>.\nReturns the node if it is of type <code>abstract_array_declarator</code>…\nReturns the node if it is of type …\nReturns the node if it is of type …\nReturns the node if it is of type …\nReturns the node if it is of type <code>alignof_expression</code> (…\nReturns the node if it is of type <code>array_declarator</code> (…\nReturns the node if it is of type <code>array_declarator</code> (…\nReturns the node if it is of type <code>array_declarator</code> (…\nReturns the node if it is of type <code>assignment_expression</code> (…\nReturns the node if it is of type <code>attributed_declarator</code> (…\nReturns the node if it is of type <code>attributed_declarator</code> (…\nReturns the node if it is of type <code>attributed_declarator</code> (…\nReturns the node if it is of type <code>attributed_statement</code> (…\nReturns the node if it is of type <code>binary_expression</code> (…\nReturns the node if it is of type <code>break_statement</code> (…\nReturns the node if it is of type <code>call_expression</code> (…\nReturns the node if it is of type <code>case_statement</code> (…\nReturns the node if it is of type <code>cast_expression</code> (…\nReturns the node if it is of type <code>char_literal</code> (<code>CharLiteral</code>…\nReturns the node if it is of type …\nReturns the node if it is of type <code>compound_statement</code> (…\nReturns the node if it is of type <code>concatenated_string</code> (…\nReturns the node if it is of type <code>conditional_expression</code> (…\nReturns the node if it is of type <code>continue_statement</code> (…\nReturns the node if it is of type <code>do_statement</code> (<code>DoStatement</code>…\nReturns the node if it is of type <code>enum_specifier</code> (…\nReturns the node if it is of type <code>expression_statement</code> (…\nReturns the node if it is of type <code>extension_expression</code> (…\nReturns the node if it is of type <code>false</code> (<code>False</code>), otherwise …\nReturns the node if it is of type <code>field_expression</code> (…\nReturns the node if it is of type <code>field_identifier</code> (…\nReturns the node if it is of type <code>for_statement</code> (…\nReturns the node if it is of type <code>function_declarator</code> (…\nReturns the node if it is of type <code>function_declarator</code> (…\nReturns the node if it is of type <code>function_declarator</code> (…\nReturns the node if it is of type <code>generic_expression</code> (…\nReturns the node if it is of type <code>gnu_asm_expression</code> (…\nReturns the node if it is of type <code>goto_statement</code> (…\nReturns the node if it is of type <code>identifier</code> (<code>Identifier</code>), …\nReturns the node if it is of type <code>identifier</code> (<code>Identifier</code>), …\nReturns the node if it is of type <code>if_statement</code> (<code>IfStatement</code>…\nReturns the node if it is of type <code>labeled_statement</code> (…\nReturns the node if it is of type <code>macro_type_specifier</code> (…\nReturns the node if it is of type <code>null</code> (<code>Null</code>), otherwise …\nReturns the node if it is of type <code>number_literal</code> (…\nReturns the node if it is of type <code>offsetof_expression</code> (…\nReturns the node if it is of type <code>parenthesized_declarator</code> …\nReturns the node if it is of type <code>parenthesized_declarator</code> …\nReturns the node if it is of type <code>parenthesized_declarator</code> …\nReturns the node if it is of type <code>parenthesized_expression</code> …\nReturns the node if it is of type <code>pointer_declarator</code> (…\nReturns the node if it is of type <code>pointer_declarator</code> (…\nReturns the node if it is of type <code>pointer_declarator</code> (…\nReturns the node if it is of type <code>pointer_expression</code> (…\nReturns the node if it is of type <code>primitive_type</code> (…\nReturns the node if it is of type <code>primitive_type</code> (…\nReturns the node if it is of type <code>return_statement</code> (…\nReturns the node if it is of type <code>seh_leave_statement</code> (…\nReturns the node if it is of type <code>seh_try_statement</code> (…\nReturns the node if it is of type <code>sized_type_specifier</code> (…\nReturns the node if it is of type <code>sizeof_expression</code> (…\nReturns the node if it is of type <code>string_literal</code> (…\nReturns the node if it is of type <code>struct_specifier</code> (…\nReturns the node if it is of type <code>subscript_expression</code> (…\nReturns the node if it is of type <code>switch_statement</code> (…\nReturns the node if it is of type <code>true</code> (<code>True</code>), otherwise …\nReturns the node if it is of type <code>type_identifier</code> (…\nReturns the node if it is of type <code>type_identifier</code> (…\nReturns the node if it is of type <code>unary_expression</code> (…\nReturns the node if it is of type <code>union_specifier</code> (…\nReturns the node if it is of type <code>update_expression</code> (…\nReturns the node if it is of type <code>while_statement</code> (…\nGet the field <code>assembly_code</code>.\nGet the node’s only non-field not-extra named child, if …\nGet the node’s not-extra named children.\nGet the field <code>body</code>.\nGet the optional field <code>body</code>.\nGet the field <code>body</code>.\nGet the field <code>body</code>.\nGet the field <code>body</code>.\nGet the field <code>body</code>.\nGet the field <code>body</code>.\nGet the field <code>body</code>.\nGet the optional field <code>body</code>.\nGet the field <code>body</code>.\nGet the optional field <code>body</code>.\nGet the field <code>body</code>.\nGet the optional field <code>clobbers</code>.\nGet the field <code>condition</code>.\nGet the field <code>condition</code>.\nGet the optional field <code>condition</code>.\nGet the field <code>condition</code>.\nGet the field <code>condition</code>.\nGet the field <code>condition</code>.\nGet the field <code>condition</code>.\nGet the field <code>condition</code>.\nGet the optional field <code>consequence</code>.\nGet the field <code>consequence</code>.\nGet the field <code>constraint</code>.\nGet the field <code>constraint</code>.\nGet the optional field <code>declarator</code>.\nGet the optional field <code>declarator</code>.\nGet the optional field <code>declarator</code>.\nGet the field <code>declarator</code>.\nGet the field <code>declarator</code>.\nGet the field <code>declarator</code>.\nGet the field <code>declarator</code>.\nGet the optional field <code>declarator</code>.\nGet the field <code>declarator</code>.\nGet the optional field <code>declarator</code>.\nGet the children of field <code>declarator</code>.\nGet the children of field <code>declarator</code>.\nGet the children of field <code>declarator</code>.\nGet the children of field <code>designator</code>.\nGet the field <code>directive</code>.\nGet the field <code>end</code>.\nGet the node’s only not-extra named child.\nGet the node’s only not-extra named child.\nGet the node’s only not-extra named child.\nGet the field <code>field</code>.\nGet the node’s only not-extra named child.\nGet the field <code>filter</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the field <code>function</code>.\nGet the node’s non-field not-extra named children.\nGet the optional field <code>goto_labels</code>.\nGet the node’s only not-extra named child.\nGet the node’s only not-extra named child.\nGet the node’s not-extra named children.\nGet the field <code>index</code>.\nGet the optional field <code>initializer</code>.\nGet the optional field <code>input_operands</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the field <code>label</code>.\nGet the field <code>label</code>.\nGet the children of field <code>label</code>.\nGet the field <code>left</code>.\nGet the field <code>left</code>.\nGet the field <code>left</code>.\nGet the field <code>member</code>.\nGet the field <code>name</code>.\nGet the optional field <code>name</code>.\nGet the field <code>name</code>.\nGet the field <code>name</code>.\nGet the field <code>name</code>.\nGet the field <code>name</code>.\nGet the field <code>name</code>.\nGet the field <code>name</code>.\nGet the optional field <code>name</code>.\nGet the optional field <code>name</code>.\nGet the children of field <code>operand</code>.\nGet the children of field <code>operand</code>.\nGet the field <code>operator</code>.\nGet the field <code>operator</code>.\nGet the field <code>operator</code>.\nGet the field <code>operator</code>.\nGet the field <code>operator</code>.\nGet the field <code>operator</code>.\nGet the node’s only non-field not-extra named child.\nGet the node’s only non-field not-extra named child.\nGet the node’s non-field not-extra named children.\nGet the node’s non-field not-extra named children.\nGet the node’s non-field not-extra named children.\nGet the node’s non-field not-extra named children.\nGet the node’s non-field not-extra named children.\nGet the node’s non-field not-extra named children.\nGet the node’s non-field not-extra named children.\nGet the node’s non-field not-extra named children.\nGet the node’s non-field not-extra named children.\nGet the node’s non-field not-extra named children.\nGet the node’s non-field not-extra named children.\nGet the node’s non-field not-extra named children.\nGet the node’s non-field not-extra named children.\nGet the node’s non-field not-extra named children.\nGet the node’s non-field not-extra named children.\nGet the optional field <code>output_operands</code>.\nGet the field <code>parameters</code>.\nGet the field <code>parameters</code>.\nGet the field <code>parameters</code>.\nGet the field <code>path</code>.\nGet the optional field <code>prefix</code>.\nGet the children of field <code>register</code>.\nGet the field <code>right</code>.\nGet the field <code>right</code>.\nGet the field <code>right</code>.\nGet the optional field <code>size</code>.\nGet the optional field <code>size</code>.\nGet the field <code>start</code>.\nGet the node’s only not-extra named child.\nGet the optional field <code>symbol</code>.\nGet the optional field <code>symbol</code>.\nGet the field <code>type</code>.\nGet the field <code>type</code>.\nGet the field <code>type</code>.\nGet the field <code>type</code>.\nGet the field <code>type</code>.\nGet the field <code>type</code>.\nGet the field <code>type</code>.\nGet the field <code>type</code>.\nGet the field <code>type</code>.\nGet the optional field <code>type</code>.\nGet the optional field <code>type</code>.\nGet the field <code>type</code>.\nGet the field <code>type</code>.\nGet the node’s non-field not-extra named children.\nGet the node’s non-field not-extra named children.\nGet the node’s non-field not-extra named children.\nGet the node’s non-field not-extra named children.\nGet the optional field <code>underlying_type</code>.\nGet the optional field <code>update</code>.\nGet the optional field <code>value</code>.\nGet the field <code>value</code>.\nGet the field <code>value</code>.\nGet the optional field <code>value</code>.\nGet the field <code>value</code>.\nGet the field <code>value</code>.\nGet the field <code>value</code>.\nGet the field <code>value</code>.\nGet the field <code>value</code>.\nGet the optional field <code>value</code>.\nGet the optional field <code>value</code>.\nGet the optional field <code>value</code>.\nOne of <code>{_abstract_declarator | _declarator}</code>:\nOne of <code>{_abstract_declarator | ms_call_modifier}</code>:\nOne of <code>{++ | --}</code>:\nOne of <code>{&amp; | *}</code>:\nOne of …\nOne of …\nOne of …\nOne of …\nOne of …\nOne of …\nOne of …\nOne of …\nOne of …\nOne of …\nOne of <code>{attribute_declaration | statement}</code>:\nOne of …\nOne of <code>{attribute_specifier | ms_declspec_modifier}</code>:\nOne of <code>{attribute_specifier | type_qualifier}</code>:\nOne of …\nOne of <code>{character | escape_sequence}</code>:\nOne of …\nOne of <code>{comma_expression | declaration | expression}</code>:\nOne of <code>{comma_expression | expression}</code>:\nOne of <code>{compound_statement | expression | preproc_defined}</code>:\nOne of …\nOne of <code>{concatenated_string | string_literal}</code>:\nOne of …\nOne of <code>{declaration | statement}</code>:\nOne of <code>{_declarator | _field_declarator | _type_declarator}</code>…\nOne of …\nOne of …\nOne of …\nOne of <code>{escape_sequence | string_content}</code>:\nOne of <code>{expression | initializer_list}</code>:\nOne of <code>{expression | initializer_list | initializer_pair}</code>:\nOne of <code>{expression | preproc_defined}</code>:\nOne of <code>{expression | type_descriptor}</code>:\nOne of …\nOne of …\nOne of <code>{identifier | string_literal}</code>:\nOne of …\nOne of …\nOne of <code>{ms_pointer_modifier | type_qualifier}</code>:\nOne of …\nOne of <code>{* | expression}</code>:\nOne of …\nOne of <code>{! | + | - | ~}</code>:\nOne of <code>{preproc_elif | preproc_elifdef | preproc_else}</code>:\nOne of <code>{primitive_type | type_identifier}</code>:\nOne of <code>{seh_except_clause | seh_finally_clause}</code>:\nOne of <code>{-&gt; | .}</code>:\nReturns the node if it is of type <code>abstract_array_declarator</code>…\nReturns the node if it is of type <code>abstract_array_declarator</code>…\nReturns the node if it is of type <code>_abstract_declarator</code> (…\nReturns the node if it is of type <code>_abstract_declarator</code> (…\nReturns the node if it is of type …\nReturns the node if it is of type …\nReturns the node if it is of type …\nReturns the node if it is of type …\nReturns the node if it is of type …\nReturns the node if it is of type …\nReturns the node if it is of type <code>+</code> (<code>symbols::Add</code>), …\nReturns the node if it is of type <code>+</code> (<code>symbols::Add</code>), …\nReturns the node if it is of type <code>++</code> (<code>symbols::AddAdd</code>), …\nReturns the node if it is of type <code>+=</code> (<code>symbols::AddEq</code>), …\nReturns the node if it is of type <code>alignof_expression</code> (…\nReturns the node if it is of type <code>alignof_expression</code> (…\nReturns the node if it is of type <code>alignof_expression</code> (…\nReturns the node if it is of type <code>alignof_expression</code> (…\nReturns the node if it is of type <code>alignof_expression</code> (…\nReturns the node if it is of type <code>alignof_expression</code> (…\nReturns the node if it is of type <code>alignof_expression</code> (…\nReturns the node if it is of type <code>alignof_expression</code> (…\nReturns the node if it is of type <code>alignof_expression</code> (…\nReturns the node if it is of type <code>&amp;</code> (<code>symbols::And</code>), …\nReturns the node if it is of type <code>&amp;</code> (<code>symbols::And</code>), …\nReturns the node if it is of type <code>&amp;&amp;</code> (<code>symbols::AndAnd</code>), …\nReturns the node if it is of type <code>&amp;=</code> (<code>symbols::AndEq</code>), …\nReturns the node if it is of type <code>array_declarator</code> (…\nReturns the node if it is of type <code>array_declarator</code> (…\nReturns the node if it is of type <code>array_declarator</code> (…\nReturns the node if it is of type <code>array_declarator</code> (…\nReturns the node if it is of type <code>array_declarator</code> (…\nReturns the node if it is of type <code>array_declarator</code> (…\nReturns the node if it is of type <code>array_declarator</code> (…\nReturns the node if it is of type <code>array_declarator</code> (…\nReturns the node if it is of type <code>array_declarator</code> (…\nReturns the node if it is of type <code>array_declarator</code> (…\nReturns the node if it is of type <code>array_declarator</code> (…\nReturns the node if it is of type <code>assignment_expression</code> (…\nReturns the node if it is of type <code>assignment_expression</code> (…\nReturns the node if it is of type <code>assignment_expression</code> (…\nReturns the node if it is of type <code>assignment_expression</code> (…\nReturns the node if it is of type <code>assignment_expression</code> (…\nReturns the node if it is of type <code>assignment_expression</code> (…\nReturns the node if it is of type <code>assignment_expression</code> (…\nReturns the node if it is of type <code>assignment_expression</code> (…\nReturns the node if it is of type <code>assignment_expression</code> (…\nReturns the node if it is of type <code>attribute_declaration</code> (…\nReturns the node if it is of type <code>attribute_declaration</code> (…\nReturns the node if it is of type <code>attribute_declaration</code> (…\nReturns the node if it is of type <code>attribute_declaration</code> (…\nReturns the node if it is of type <code>attribute_declaration</code> (…\nReturns the node if it is of type <code>attribute_specifier</code> (…\nReturns the node if it is of type <code>attribute_specifier</code> (…\nReturns the node if it is of type <code>attribute_specifier</code> (…\nReturns the node if it is of type <code>attribute_specifier</code> (…\nReturns the node if it is of type <code>attribute_specifier</code> (…\nReturns the node if it is of type <code>attribute_specifier</code> (…\nReturns the node if it is of type <code>attributed_declarator</code> (…\nReturns the node if it is of type <code>attributed_declarator</code> (…\nReturns the node if it is of type <code>attributed_declarator</code> (…\nReturns the node if it is of type <code>attributed_declarator</code> (…\nReturns the node if it is of type <code>attributed_declarator</code> (…\nReturns the node if it is of type <code>attributed_declarator</code> (…\nReturns the node if it is of type <code>attributed_declarator</code> (…\nReturns the node if it is of type <code>attributed_declarator</code> (…\nReturns the node if it is of type <code>attributed_declarator</code> (…\nReturns the node if it is of type <code>attributed_declarator</code> (…\nReturns the node if it is of type <code>attributed_declarator</code> (…\nReturns the node if it is of type <code>attributed_statement</code> (…\nReturns the node if it is of type <code>attributed_statement</code> (…\nReturns the node if it is of type <code>attributed_statement</code> (…\nReturns the node if it is of type <code>attributed_statement</code> (…\nReturns the node if it is of type <code>attributed_statement</code> (…\nReturns the node if it is of type <code>attributed_statement</code> (…\nReturns the node if it is of type <code>binary_expression</code> (…\nReturns the node if it is of type <code>binary_expression</code> (…\nReturns the node if it is of type <code>binary_expression</code> (…\nReturns the node if it is of type <code>binary_expression</code> (…\nReturns the node if it is of type <code>binary_expression</code> (…\nReturns the node if it is of type <code>binary_expression</code> (…\nReturns the node if it is of type <code>binary_expression</code> (…\nReturns the node if it is of type <code>binary_expression</code> (…\nReturns the node if it is of type <code>binary_expression</code> (…\nReturns the node if it is of type <code>binary_expression</code> (…\nReturns the node if it is of type <code>~</code> (<code>symbols::BitNot</code>), …\nReturns the node if it is of type <code>^</code> (<code>symbols::BitXor</code>), …\nReturns the node if it is of type <code>^=</code> (<code>symbols::BitXorEq</code>), …\nReturns the node if it is of type <code>bitfield_clause</code> (…\nReturns the node if it is of type <code>break_statement</code> (…\nReturns the node if it is of type <code>break_statement</code> (…\nReturns the node if it is of type <code>break_statement</code> (…\nReturns the node if it is of type <code>break_statement</code> (…\nReturns the node if it is of type <code>break_statement</code> (…\nReturns the node if it is of type <code>break_statement</code> (…\nReturns the node if it is of type <code>call_expression</code> (…\nReturns the node if it is of type <code>call_expression</code> (…\nReturns the node if it is of type <code>call_expression</code> (…\nReturns the node if it is of type <code>call_expression</code> (…\nReturns the node if it is of type <code>call_expression</code> (…\nReturns the node if it is of type <code>call_expression</code> (…\nReturns the node if it is of type <code>call_expression</code> (…\nReturns the node if it is of type <code>call_expression</code> (…\nReturns the node if it is of type <code>call_expression</code> (…\nReturns the node if it is of type <code>call_expression</code> (…\nReturns the node if it is of type <code>call_expression</code> (…\nReturns the node if it is of type <code>call_expression</code> (…\nReturns the node if it is of type <code>call_expression</code> (…\nReturns the node if it is of type <code>case_statement</code> (…\nReturns the node if it is of type <code>case_statement</code> (…\nReturns the node if it is of type <code>case_statement</code> (…\nReturns the node if it is of type <code>case_statement</code> (…\nReturns the node if it is of type <code>case_statement</code> (…\nReturns the node if it is of type <code>cast_expression</code> (…\nReturns the node if it is of type <code>cast_expression</code> (…\nReturns the node if it is of type <code>cast_expression</code> (…\nReturns the node if it is of type <code>cast_expression</code> (…\nReturns the node if it is of type <code>cast_expression</code> (…\nReturns the node if it is of type <code>cast_expression</code> (…\nReturns the node if it is of type <code>cast_expression</code> (…\nReturns the node if it is of type <code>cast_expression</code> (…\nReturns the node if it is of type <code>cast_expression</code> (…\nReturns the node if it is of type <code>char_literal</code> (<code>CharLiteral</code>…\nReturns the node if it is of type <code>char_literal</code> (<code>CharLiteral</code>…\nReturns the node if it is of type <code>char_literal</code> (<code>CharLiteral</code>…\nReturns the node if it is of type <code>char_literal</code> (<code>CharLiteral</code>…\nReturns the node if it is of type <code>char_literal</code> (<code>CharLiteral</code>…\nReturns the node if it is of type <code>char_literal</code> (<code>CharLiteral</code>…\nReturns the node if it is of type <code>char_literal</code> (<code>CharLiteral</code>…\nReturns the node if it is of type <code>char_literal</code> (<code>CharLiteral</code>…\nReturns the node if it is of type <code>char_literal</code> (<code>CharLiteral</code>…\nReturns the node if it is of type <code>char_literal</code> (<code>CharLiteral</code>…\nReturns the node if it is of type <code>character</code> (<code>Character</code>), …\nReturns the node if it is of type <code>comma_expression</code> (…\nReturns the node if it is of type <code>comma_expression</code> (…\nReturns the node if it is of type <code>comma_expression</code> (…\nReturns the node if it is of type …\nReturns the node if it is of type …\nReturns the node if it is of type …\nReturns the node if it is of type …\nReturns the node if it is of type …\nReturns the node if it is of type …\nReturns the node if it is of type …\nReturns the node if it is of type …\nReturns the node if it is of type …\nReturns the node if it is of type <code>compound_statement</code> (…\nReturns the node if it is of type <code>compound_statement</code> (…\nReturns the node if it is of type <code>compound_statement</code> (…\nReturns the node if it is of type <code>compound_statement</code> (…\nReturns the node if it is of type <code>compound_statement</code> (…\nReturns the node if it is of type <code>compound_statement</code> (…\nReturns the node if it is of type <code>compound_statement</code> (…\nReturns the node if it is of type <code>compound_statement</code> (…\nReturns the node if it is of type <code>compound_statement</code> (…\nReturns the node if it is of type <code>concatenated_string</code> (…\nReturns the node if it is of type <code>concatenated_string</code> (…\nReturns the node if it is of type <code>concatenated_string</code> (…\nReturns the node if it is of type <code>concatenated_string</code> (…\nReturns the node if it is of type <code>concatenated_string</code> (…\nReturns the node if it is of type <code>concatenated_string</code> (…\nReturns the node if it is of type <code>concatenated_string</code> (…\nReturns the node if it is of type <code>concatenated_string</code> (…\nReturns the node if it is of type <code>concatenated_string</code> (…\nReturns the node if it is of type <code>concatenated_string</code> (…\nReturns the node if it is of type <code>conditional_expression</code> (…\nReturns the node if it is of type <code>conditional_expression</code> (…\nReturns the node if it is of type <code>conditional_expression</code> (…\nReturns the node if it is of type <code>conditional_expression</code> (…\nReturns the node if it is of type <code>conditional_expression</code> (…\nReturns the node if it is of type <code>conditional_expression</code> (…\nReturns the node if it is of type <code>conditional_expression</code> (…\nReturns the node if it is of type <code>conditional_expression</code> (…\nReturns the node if it is of type <code>conditional_expression</code> (…\nReturns the node if it is of type <code>continue_statement</code> (…\nReturns the node if it is of type <code>continue_statement</code> (…\nReturns the node if it is of type <code>continue_statement</code> (…\nReturns the node if it is of type <code>continue_statement</code> (…\nReturns the node if it is of type <code>continue_statement</code> (…\nReturns the node if it is of type <code>continue_statement</code> (…\nReturns the node if it is of type <code>declaration</code> (<code>Declaration</code>…\nReturns the node if it is of type <code>declaration</code> (<code>Declaration</code>…\nReturns the node if it is of type <code>declaration</code> (<code>Declaration</code>…\nReturns the node if it is of type <code>declaration</code> (<code>Declaration</code>…\nReturns the node if it is of type <code>declaration</code> (<code>Declaration</code>…\nReturns the node if it is of type <code>declaration</code> (<code>Declaration</code>…\nReturns the node if it is of type <code>declaration</code> (<code>Declaration</code>…\nReturns the node if it is of type <code>declaration</code> (<code>Declaration</code>…\nReturns the node if it is of type <code>declaration_list</code> (…\nReturns the node if it is of type <code>_declarator</code> (<code>Declarator</code>…\nReturns the node if it is of type <code>_declarator</code> (<code>Declarator</code>…\nReturns the node if it is of type <code>_declarator</code> (<code>Declarator</code>…\nReturns the node if it is of type <code>_declarator</code> (<code>Declarator</code>…\nReturns the node if it is of type <code>/</code> (<code>symbols::Div</code>), …\nReturns the node if it is of type <code>/=</code> (<code>symbols::DivEq</code>), …\nReturns the node if it is of type <code>do_statement</code> (<code>DoStatement</code>…\nReturns the node if it is of type <code>do_statement</code> (<code>DoStatement</code>…\nReturns the node if it is of type <code>do_statement</code> (<code>DoStatement</code>…\nReturns the node if it is of type <code>do_statement</code> (<code>DoStatement</code>…\nReturns the node if it is of type <code>do_statement</code> (<code>DoStatement</code>…\nReturns the node if it is of type <code>do_statement</code> (<code>DoStatement</code>…\nReturns the node if it is of type <code>.</code> (<code>symbols::Dot</code>), …\nReturns the node if it is of type <code>enum_specifier</code> (…\nReturns the node if it is of type <code>enum_specifier</code> (…\nReturns the node if it is of type <code>enum_specifier</code> (…\nReturns the node if it is of type <code>enumerator</code> (<code>Enumerator</code>), …\nReturns the node if it is of type <code>enumerator</code> (<code>Enumerator</code>), …\nReturns the node if it is of type <code>=</code> (<code>symbols::Eq</code>), …\nReturns the node if it is of type <code>==</code> (<code>symbols::EqEq</code>), …\nReturns the node if it is of type <code>escape_sequence</code> (…\nReturns the node if it is of type <code>escape_sequence</code> (…\nReturns the node if it is of type <code>expression</code> (<code>Expression</code>), …\nReturns the node if it is of type <code>expression</code> (<code>Expression</code>), …\nReturns the node if it is of type <code>expression</code> (<code>Expression</code>), …\nReturns the node if it is of type <code>expression</code> (<code>Expression</code>), …\nReturns the node if it is of type <code>expression</code> (<code>Expression</code>), …\nReturns the node if it is of type <code>expression</code> (<code>Expression</code>), …\nReturns the node if it is of type <code>expression</code> (<code>Expression</code>), …\nReturns the node if it is of type <code>expression</code> (<code>Expression</code>), …\nReturns the node if it is of type <code>expression</code> (<code>Expression</code>), …\nReturns the node if it is of type <code>expression_statement</code> (…\nReturns the node if it is of type <code>expression_statement</code> (…\nReturns the node if it is of type <code>expression_statement</code> (…\nReturns the node if it is of type <code>expression_statement</code> (…\nReturns the node if it is of type <code>expression_statement</code> (…\nReturns the node if it is of type <code>expression_statement</code> (…\nReturns the node if it is of type <code>extension_expression</code> (…\nReturns the node if it is of type <code>extension_expression</code> (…\nReturns the node if it is of type <code>extension_expression</code> (…\nReturns the node if it is of type <code>extension_expression</code> (…\nReturns the node if it is of type <code>extension_expression</code> (…\nReturns the node if it is of type <code>extension_expression</code> (…\nReturns the node if it is of type <code>extension_expression</code> (…\nReturns the node if it is of type <code>extension_expression</code> (…\nReturns the node if it is of type <code>extension_expression</code> (…\nReturns the node if it is of type <code>false</code> (<code>False</code>), otherwise …\nReturns the node if it is of type <code>false</code> (<code>False</code>), otherwise …\nReturns the node if it is of type <code>false</code> (<code>False</code>), otherwise …\nReturns the node if it is of type <code>false</code> (<code>False</code>), otherwise …\nReturns the node if it is of type <code>false</code> (<code>False</code>), otherwise …\nReturns the node if it is of type <code>false</code> (<code>False</code>), otherwise …\nReturns the node if it is of type <code>false</code> (<code>False</code>), otherwise …\nReturns the node if it is of type <code>false</code> (<code>False</code>), otherwise …\nReturns the node if it is of type <code>false</code> (<code>False</code>), otherwise …\nReturns the node if it is of type <code>field_declaration</code> (…\nReturns the node if it is of type <code>field_declaration</code> (…\nReturns the node if it is of type <code>_field_declarator</code> (…\nReturns the node if it is of type <code>_field_declarator</code> (…\nReturns the node if it is of type <code>_field_declarator</code> (…\nReturns the node if it is of type <code>field_designator</code> (…\nReturns the node if it is of type <code>field_expression</code> (…\nReturns the node if it is of type <code>field_expression</code> (…\nReturns the node if it is of type <code>field_expression</code> (…\nReturns the node if it is of type <code>field_expression</code> (…\nReturns the node if it is of type <code>field_expression</code> (…\nReturns the node if it is of type <code>field_expression</code> (…\nReturns the node if it is of type <code>field_expression</code> (…\nReturns the node if it is of type <code>field_expression</code> (…\nReturns the node if it is of type <code>field_expression</code> (…\nReturns the node if it is of type <code>field_expression</code> (…\nReturns the node if it is of type <code>field_identifier</code> (…\nReturns the node if it is of type <code>field_identifier</code> (…\nReturns the node if it is of type <code>field_identifier</code> (…\nReturns the node if it is of type <code>field_identifier</code> (…\nReturns the node if it is of type <code>for_statement</code> (…\nReturns the node if it is of type <code>for_statement</code> (…\nReturns the node if it is of type <code>for_statement</code> (…\nReturns the node if it is of type <code>for_statement</code> (…\nReturns the node if it is of type <code>for_statement</code> (…\nReturns the node if it is of type <code>for_statement</code> (…\nReturns the node if it is of type <code>function_declarator</code> (…\nReturns the node if it is of type <code>function_declarator</code> (…\nReturns the node if it is of type <code>function_declarator</code> (…\nReturns the node if it is of type <code>function_declarator</code> (…\nReturns the node if it is of type <code>function_declarator</code> (…\nReturns the node if it is of type <code>function_declarator</code> (…\nReturns the node if it is of type <code>function_declarator</code> (…\nReturns the node if it is of type <code>function_declarator</code> (…\nReturns the node if it is of type <code>function_declarator</code> (…\nReturns the node if it is of type <code>function_declarator</code> (…\nReturns the node if it is of type <code>function_declarator</code> (…\nReturns the node if it is of type <code>function_definition</code> (…\nReturns the node if it is of type <code>function_definition</code> (…\nReturns the node if it is of type <code>function_definition</code> (…\nReturns the node if it is of type <code>function_definition</code> (…\nReturns the node if it is of type <code>generic_expression</code> (…\nReturns the node if it is of type <code>generic_expression</code> (…\nReturns the node if it is of type <code>generic_expression</code> (…\nReturns the node if it is of type <code>generic_expression</code> (…\nReturns the node if it is of type <code>generic_expression</code> (…\nReturns the node if it is of type <code>generic_expression</code> (…\nReturns the node if it is of type <code>generic_expression</code> (…\nReturns the node if it is of type <code>generic_expression</code> (…\nReturns the node if it is of type <code>generic_expression</code> (…\nReturns the node if it is of type <code>gnu_asm_expression</code> (…\nReturns the node if it is of type <code>gnu_asm_expression</code> (…\nReturns the node if it is of type <code>gnu_asm_expression</code> (…\nReturns the node if it is of type <code>gnu_asm_expression</code> (…\nReturns the node if it is of type <code>gnu_asm_expression</code> (…\nReturns the node if it is of type <code>gnu_asm_expression</code> (…\nReturns the node if it is of type <code>gnu_asm_expression</code> (…\nReturns the node if it is of type <code>gnu_asm_expression</code> (…\nReturns the node if it is of type <code>gnu_asm_expression</code> (…\nReturns the node if it is of type <code>gnu_asm_expression</code> (…\nReturns the node if it is of type <code>gnu_asm_expression</code> (…\nReturns the node if it is of type <code>goto_statement</code> (…\nReturns the node if it is of type <code>goto_statement</code> (…\nReturns the node if it is of type <code>goto_statement</code> (…\nReturns the node if it is of type <code>goto_statement</code> (…\nReturns the node if it is of type <code>goto_statement</code> (…\nReturns the node if it is of type <code>goto_statement</code> (…\nReturns the node if it is of type <code>&gt;</code> (<code>symbols::Gt</code>), …\nReturns the node if it is of type <code>&gt;=</code> (<code>symbols::GtEq</code>), …\nReturns the node if it is of type <code>&gt;&gt;</code> (<code>symbols::GtGt</code>), …\nReturns the node if it is of type <code>&gt;&gt;=</code> (<code>symbols::GtGtEq</code>), …\nReturns the node if it is of type <code>identifier</code> (<code>Identifier</code>), …\nReturns the node if it is of type <code>identifier</code> (<code>Identifier</code>), …\nReturns the node if it is of type <code>identifier</code> (<code>Identifier</code>), …\nReturns the node if it is of type <code>identifier</code> (<code>Identifier</code>), …\nReturns the node if it is of type <code>identifier</code> (<code>Identifier</code>), …\nReturns the node if it is of type <code>identifier</code> (<code>Identifier</code>), …\nReturns the node if it is of type <code>identifier</code> (<code>Identifier</code>), …\nReturns the node if it is of type <code>identifier</code> (<code>Identifier</code>), …\nReturns the node if it is of type <code>identifier</code> (<code>Identifier</code>), …\nReturns the node if it is of type <code>identifier</code> (<code>Identifier</code>), …\nReturns the node if it is of type <code>identifier</code> (<code>Identifier</code>), …\nReturns the node if it is of type <code>identifier</code> (<code>Identifier</code>), …\nReturns the node if it is of type <code>identifier</code> (<code>Identifier</code>), …\nReturns the node if it is of type <code>identifier</code> (<code>Identifier</code>), …\nReturns the node if it is of type <code>identifier</code> (<code>Identifier</code>), …\nReturns the node if it is of type <code>identifier</code> (<code>Identifier</code>), …\nReturns the node if it is of type <code>identifier</code> (<code>Identifier</code>), …\nReturns the node if it is of type <code>identifier</code> (<code>Identifier</code>), …\nReturns the node if it is of type <code>identifier</code> (<code>Identifier</code>), …\nReturns the node if it is of type <code>identifier</code> (<code>Identifier</code>), …\nReturns the node if it is of type <code>if_statement</code> (<code>IfStatement</code>…\nReturns the node if it is of type <code>if_statement</code> (<code>IfStatement</code>…\nReturns the node if it is of type <code>if_statement</code> (<code>IfStatement</code>…\nReturns the node if it is of type <code>if_statement</code> (<code>IfStatement</code>…\nReturns the node if it is of type <code>if_statement</code> (<code>IfStatement</code>…\nReturns the node if it is of type <code>if_statement</code> (<code>IfStatement</code>…\nReturns the node if it is of type <code>init_declarator</code> (…\nReturns the node if it is of type <code>initializer_list</code> (…\nReturns the node if it is of type <code>initializer_list</code> (…\nReturns the node if it is of type <code>initializer_pair</code> (…\nReturns the node if it is of type <code>labeled_statement</code> (…\nReturns the node if it is of type <code>labeled_statement</code> (…\nReturns the node if it is of type <code>labeled_statement</code> (…\nReturns the node if it is of type <code>labeled_statement</code> (…\nReturns the node if it is of type <code>labeled_statement</code> (…\nReturns the node if it is of type <code>labeled_statement</code> (…\nReturns the node if it is of type <code>linkage_specification</code> (…\nReturns the node if it is of type <code>linkage_specification</code> (…\nReturns the node if it is of type <code>linkage_specification</code> (…\nReturns the node if it is of type <code>&lt;</code> (<code>symbols::Lt</code>), …\nReturns the node if it is of type <code>&lt;=</code> (<code>symbols::LtEq</code>), …\nReturns the node if it is of type <code>&lt;&lt;</code> (<code>symbols::LtLt</code>), …\nReturns the node if it is of type <code>&lt;&lt;=</code> (<code>symbols::LtLtEq</code>), …\nReturns the node if it is of type <code>macro_type_specifier</code> (…\nReturns the node if it is of type <code>macro_type_specifier</code> (…\nReturns the node if it is of type <code>macro_type_specifier</code> (…\nReturns the node if it is of type <code>%</code> (<code>symbols::Mod</code>), …\nReturns the node if it is of type <code>%=</code> (<code>symbols::ModEq</code>), …\nReturns the node if it is of type <code>ms_based_modifier</code> (…\nReturns the node if it is of type <code>ms_call_modifier</code> (…\nReturns the node if it is of type <code>ms_call_modifier</code> (…\nReturns the node if it is of type <code>ms_call_modifier</code> (…\nReturns the node if it is of type <code>ms_call_modifier</code> (…\nReturns the node if it is of type <code>ms_declspec_modifier</code> (…\nReturns the node if it is of type <code>ms_declspec_modifier</code> (…\nReturns the node if it is of type <code>ms_declspec_modifier</code> (…\nReturns the node if it is of type <code>ms_declspec_modifier</code> (…\nReturns the node if it is of type <code>ms_pointer_modifier</code> (…\nReturns the node if it is of type <code>ms_pointer_modifier</code> (…\nReturns the node if it is of type <code>ms_restrict_modifier</code> (…\nReturns the node if it is of type <code>ms_signed_ptr_modifier</code> (…\nReturns the node if it is of type <code>ms_unaligned_ptr_modifier</code>…\nReturns the node if it is of type <code>ms_unsigned_ptr_modifier</code> …\nReturns the node if it is of type <code>*</code> (<code>symbols::Mul</code>), …\nReturns the node if it is of type <code>*</code> (<code>symbols::Mul</code>), …\nReturns the node if it is of type <code>*</code> (<code>symbols::Mul</code>), …\nReturns the node if it is of type <code>*=</code> (<code>symbols::MulEq</code>), …\nReturns the node if it is of type <code>!</code> (<code>symbols::Not</code>), …\nReturns the node if it is of type <code>!=</code> (<code>symbols::NotEq</code>), …\nReturns the node if it is of type <code>null</code> (<code>Null</code>), otherwise …\nReturns the node if it is of type <code>null</code> (<code>Null</code>), otherwise …\nReturns the node if it is of type <code>null</code> (<code>Null</code>), otherwise …\nReturns the node if it is of type <code>null</code> (<code>Null</code>), otherwise …\nReturns the node if it is of type <code>null</code> (<code>Null</code>), otherwise …\nReturns the node if it is of type <code>null</code> (<code>Null</code>), otherwise …\nReturns the node if it is of type <code>null</code> (<code>Null</code>), otherwise …\nReturns the node if it is of type <code>null</code> (<code>Null</code>), otherwise …\nReturns the node if it is of type <code>null</code> (<code>Null</code>), otherwise …\nReturns the node if it is of type <code>number_literal</code> (…\nReturns the node if it is of type <code>number_literal</code> (…\nReturns the node if it is of type <code>number_literal</code> (…\nReturns the node if it is of type <code>number_literal</code> (…\nReturns the node if it is of type <code>number_literal</code> (…\nReturns the node if it is of type <code>number_literal</code> (…\nReturns the node if it is of type <code>number_literal</code> (…\nReturns the node if it is of type <code>number_literal</code> (…\nReturns the node if it is of type <code>number_literal</code> (…\nReturns the node if it is of type <code>number_literal</code> (…\nReturns the node if it is of type <code>offsetof_expression</code> (…\nReturns the node if it is of type <code>offsetof_expression</code> (…\nReturns the node if it is of type <code>offsetof_expression</code> (…\nReturns the node if it is of type <code>offsetof_expression</code> (…\nReturns the node if it is of type <code>offsetof_expression</code> (…\nReturns the node if it is of type <code>offsetof_expression</code> (…\nReturns the node if it is of type <code>offsetof_expression</code> (…\nReturns the node if it is of type <code>offsetof_expression</code> (…\nReturns the node if it is of type <code>offsetof_expression</code> (…\nReturns the node if it is of type <code>|</code> (<code>symbols::Or</code>), …\nReturns the node if it is of type <code>|=</code> (<code>symbols::OrEq</code>), …\nReturns the node if it is of type <code>||</code> (<code>symbols::OrOr</code>), …\nReturns the node if it is of type <code>parameter_declaration</code> (…\nReturns the node if it is of type <code>parenthesized_declarator</code> …\nReturns the node if it is of type <code>parenthesized_declarator</code> …\nReturns the node if it is of type <code>parenthesized_declarator</code> …\nReturns the node if it is of type <code>parenthesized_declarator</code> …\nReturns the node if it is of type <code>parenthesized_declarator</code> …\nReturns the node if it is of type <code>parenthesized_declarator</code> …\nReturns the node if it is of type <code>parenthesized_declarator</code> …\nReturns the node if it is of type <code>parenthesized_declarator</code> …\nReturns the node if it is of type <code>parenthesized_declarator</code> …\nReturns the node if it is of type <code>parenthesized_declarator</code> …\nReturns the node if it is of type <code>parenthesized_declarator</code> …\nReturns the node if it is of type <code>parenthesized_expression</code> …\nReturns the node if it is of type <code>parenthesized_expression</code> …\nReturns the node if it is of type <code>parenthesized_expression</code> …\nReturns the node if it is of type <code>parenthesized_expression</code> …\nReturns the node if it is of type <code>parenthesized_expression</code> …\nReturns the node if it is of type <code>parenthesized_expression</code> …\nReturns the node if it is of type <code>parenthesized_expression</code> …\nReturns the node if it is of type <code>parenthesized_expression</code> …\nReturns the node if it is of type <code>parenthesized_expression</code> …\nReturns the node if it is of type <code>parenthesized_expression</code> …\nReturns the node if it is of type <code>parenthesized_expression</code> …\nReturns the node if it is of type <code>pointer_declarator</code> (…\nReturns the node if it is of type <code>pointer_declarator</code> (…\nReturns the node if it is of type <code>pointer_declarator</code> (…\nReturns the node if it is of type <code>pointer_declarator</code> (…\nReturns the node if it is of type <code>pointer_declarator</code> (…\nReturns the node if it is of type <code>pointer_declarator</code> (…\nReturns the node if it is of type <code>pointer_declarator</code> (…\nReturns the node if it is of type <code>pointer_declarator</code> (…\nReturns the node if it is of type <code>pointer_declarator</code> (…\nReturns the node if it is of type <code>pointer_declarator</code> (…\nReturns the node if it is of type <code>pointer_declarator</code> (…\nReturns the node if it is of type <code>pointer_expression</code> (…\nReturns the node if it is of type <code>pointer_expression</code> (…\nReturns the node if it is of type <code>pointer_expression</code> (…\nReturns the node if it is of type <code>pointer_expression</code> (…\nReturns the node if it is of type <code>pointer_expression</code> (…\nReturns the node if it is of type <code>pointer_expression</code> (…\nReturns the node if it is of type <code>pointer_expression</code> (…\nReturns the node if it is of type <code>pointer_expression</code> (…\nReturns the node if it is of type <code>pointer_expression</code> (…\nReturns the node if it is of type <code>pointer_expression</code> (…\nReturns the node if it is of type <code>preproc_call</code> (<code>PreprocCall</code>…\nReturns the node if it is of type <code>preproc_call</code> (<code>PreprocCall</code>…\nReturns the node if it is of type <code>preproc_call</code> (<code>PreprocCall</code>…\nReturns the node if it is of type <code>preproc_call</code> (<code>PreprocCall</code>…\nReturns the node if it is of type <code>preproc_call</code> (<code>PreprocCall</code>…\nReturns the node if it is of type <code>preproc_def</code> (<code>PreprocDef</code>…\nReturns the node if it is of type <code>preproc_def</code> (<code>PreprocDef</code>…\nReturns the node if it is of type <code>preproc_def</code> (<code>PreprocDef</code>…\nReturns the node if it is of type <code>preproc_def</code> (<code>PreprocDef</code>…\nReturns the node if it is of type <code>preproc_defined</code> (…\nReturns the node if it is of type <code>preproc_defined</code> (…\nReturns the node if it is of type <code>preproc_defined</code> (…\nReturns the node if it is of type <code>preproc_defined</code> (…\nReturns the node if it is of type <code>preproc_elif</code> (<code>PreprocElif</code>…\nReturns the node if it is of type <code>preproc_elifdef</code> (…\nReturns the node if it is of type <code>preproc_else</code> (<code>PreprocElse</code>…\nReturns the node if it is of type <code>preproc_function_def</code> (…\nReturns the node if it is of type <code>preproc_function_def</code> (…\nReturns the node if it is of type <code>preproc_function_def</code> (…\nReturns the node if it is of type <code>preproc_function_def</code> (…\nReturns the node if it is of type <code>preproc_if</code> (<code>PreprocIf</code>), …\nReturns the node if it is of type <code>preproc_if</code> (<code>PreprocIf</code>), …\nReturns the node if it is of type <code>preproc_if</code> (<code>PreprocIf</code>), …\nReturns the node if it is of type <code>preproc_if</code> (<code>PreprocIf</code>), …\nReturns the node if it is of type <code>preproc_if</code> (<code>PreprocIf</code>), …\nReturns the node if it is of type <code>preproc_ifdef</code> (…\nReturns the node if it is of type <code>preproc_ifdef</code> (…\nReturns the node if it is of type <code>preproc_ifdef</code> (…\nReturns the node if it is of type <code>preproc_ifdef</code> (…\nReturns the node if it is of type <code>preproc_ifdef</code> (…\nReturns the node if it is of type <code>preproc_include</code> (…\nReturns the node if it is of type <code>preproc_include</code> (…\nReturns the node if it is of type <code>preproc_include</code> (…\nReturns the node if it is of type <code>primitive_type</code> (…\nReturns the node if it is of type <code>primitive_type</code> (…\nReturns the node if it is of type <code>primitive_type</code> (…\nReturns the node if it is of type <code>primitive_type</code> (…\nReturns the node if it is of type <code>primitive_type</code> (…\nReturns the node if it is of type <code>primitive_type</code> (…\nReturns the node if it is of type <code>primitive_type</code> (…\nReturns the node if it is of type <code>return_statement</code> (…\nReturns the node if it is of type <code>return_statement</code> (…\nReturns the node if it is of type <code>return_statement</code> (…\nReturns the node if it is of type <code>return_statement</code> (…\nReturns the node if it is of type <code>return_statement</code> (…\nReturns the node if it is of type <code>return_statement</code> (…\nReturns the node if it is of type <code>seh_except_clause</code> (…\nReturns the node if it is of type <code>seh_finally_clause</code> (…\nReturns the node if it is of type <code>seh_leave_statement</code> (…\nReturns the node if it is of type <code>seh_leave_statement</code> (…\nReturns the node if it is of type <code>seh_leave_statement</code> (…\nReturns the node if it is of type <code>seh_leave_statement</code> (…\nReturns the node if it is of type <code>seh_leave_statement</code> (…\nReturns the node if it is of type <code>seh_try_statement</code> (…\nReturns the node if it is of type <code>seh_try_statement</code> (…\nReturns the node if it is of type <code>seh_try_statement</code> (…\nReturns the node if it is of type <code>seh_try_statement</code> (…\nReturns the node if it is of type <code>seh_try_statement</code> (…\nReturns the node if it is of type <code>sized_type_specifier</code> (…\nReturns the node if it is of type <code>sized_type_specifier</code> (…\nReturns the node if it is of type <code>sized_type_specifier</code> (…\nReturns the node if it is of type <code>sizeof_expression</code> (…\nReturns the node if it is of type <code>sizeof_expression</code> (…\nReturns the node if it is of type <code>sizeof_expression</code> (…\nReturns the node if it is of type <code>sizeof_expression</code> (…\nReturns the node if it is of type <code>sizeof_expression</code> (…\nReturns the node if it is of type <code>sizeof_expression</code> (…\nReturns the node if it is of type <code>sizeof_expression</code> (…\nReturns the node if it is of type <code>sizeof_expression</code> (…\nReturns the node if it is of type <code>sizeof_expression</code> (…\nReturns the node if it is of type <code>statement</code> (<code>Statement</code>), …\nReturns the node if it is of type <code>statement</code> (<code>Statement</code>), …\nReturns the node if it is of type <code>statement</code> (<code>Statement</code>), …\nReturns the node if it is of type <code>statement</code> (<code>Statement</code>), …\nReturns the node if it is of type <code>storage_class_specifier</code> (…\nReturns the node if it is of type <code>storage_class_specifier</code> (…\nReturns the node if it is of type <code>storage_class_specifier</code> (…\nReturns the node if it is of type <code>string_content</code> (…\nReturns the node if it is of type <code>string_literal</code> (…\nReturns the node if it is of type <code>string_literal</code> (…\nReturns the node if it is of type <code>string_literal</code> (…\nReturns the node if it is of type <code>string_literal</code> (…\nReturns the node if it is of type <code>string_literal</code> (…\nReturns the node if it is of type <code>string_literal</code> (…\nReturns the node if it is of type <code>string_literal</code> (…\nReturns the node if it is of type <code>string_literal</code> (…\nReturns the node if it is of type <code>string_literal</code> (…\nReturns the node if it is of type <code>string_literal</code> (…\nReturns the node if it is of type <code>string_literal</code> (…\nReturns the node if it is of type <code>string_literal</code> (…\nReturns the node if it is of type <code>struct_specifier</code> (…\nReturns the node if it is of type <code>struct_specifier</code> (…\nReturns the node if it is of type <code>struct_specifier</code> (…\nReturns the node if it is of type <code>-</code> (<code>symbols::Sub</code>), …\nReturns the node if it is of type <code>-</code> (<code>symbols::Sub</code>), …\nReturns the node if it is of type <code>-=</code> (<code>symbols::SubEq</code>), …\nReturns the node if it is of type <code>-&gt;</code> (<code>symbols::SubGt</code>), …\nReturns the node if it is of type <code>--</code> (<code>symbols::SubSub</code>), …\nReturns the node if it is of type <code>subscript_designator</code> (…\nReturns the node if it is of type <code>subscript_expression</code> (…\nReturns the node if it is of type <code>subscript_expression</code> (…\nReturns the node if it is of type <code>subscript_expression</code> (…\nReturns the node if it is of type <code>subscript_expression</code> (…\nReturns the node if it is of type <code>subscript_expression</code> (…\nReturns the node if it is of type <code>subscript_expression</code> (…\nReturns the node if it is of type <code>subscript_expression</code> (…\nReturns the node if it is of type <code>subscript_expression</code> (…\nReturns the node if it is of type <code>subscript_expression</code> (…\nReturns the node if it is of type <code>subscript_expression</code> (…\nReturns the node if it is of type …\nReturns the node if it is of type <code>switch_statement</code> (…\nReturns the node if it is of type <code>switch_statement</code> (…\nReturns the node if it is of type <code>switch_statement</code> (…\nReturns the node if it is of type <code>switch_statement</code> (…\nReturns the node if it is of type <code>switch_statement</code> (…\nReturns the node if it is of type <code>switch_statement</code> (…\nReturns the node if it is of type <code>system_lib_string</code> (…\nReturns the node if it is of type <code>true</code> (<code>True</code>), otherwise …\nReturns the node if it is of type <code>true</code> (<code>True</code>), otherwise …\nReturns the node if it is of type <code>true</code> (<code>True</code>), otherwise …\nReturns the node if it is of type <code>true</code> (<code>True</code>), otherwise …\nReturns the node if it is of type <code>true</code> (<code>True</code>), otherwise …\nReturns the node if it is of type <code>true</code> (<code>True</code>), otherwise …\nReturns the node if it is of type <code>true</code> (<code>True</code>), otherwise …\nReturns the node if it is of type <code>true</code> (<code>True</code>), otherwise …\nReturns the node if it is of type <code>true</code> (<code>True</code>), otherwise …\nReturns the node if it is of type <code>_type_declarator</code> (…\nReturns the node if it is of type <code>_type_declarator</code> (…\nReturns the node if it is of type <code>_type_declarator</code> (…\nReturns the node if it is of type <code>type_definition</code> (…\nReturns the node if it is of type <code>type_definition</code> (…\nReturns the node if it is of type <code>type_definition</code> (…\nReturns the node if it is of type <code>type_definition</code> (…\nReturns the node if it is of type <code>type_descriptor</code> (…\nReturns the node if it is of type <code>type_identifier</code> (…\nReturns the node if it is of type <code>type_identifier</code> (…\nReturns the node if it is of type <code>type_identifier</code> (…\nReturns the node if it is of type <code>type_identifier</code> (…\nReturns the node if it is of type <code>type_identifier</code> (…\nReturns the node if it is of type <code>type_identifier</code> (…\nReturns the node if it is of type <code>type_identifier</code> (…\nReturns the node if it is of type <code>type_qualifier</code> (…\nReturns the node if it is of type <code>type_qualifier</code> (…\nReturns the node if it is of type <code>type_qualifier</code> (…\nReturns the node if it is of type <code>type_qualifier</code> (…\nReturns the node if it is of type <code>type_qualifier</code> (…\nReturns the node if it is of type <code>type_qualifier</code> (…\nReturns the node if it is of type <code>type_specifier</code> (…\nReturns the node if it is of type <code>type_specifier</code> (…\nReturns the node if it is of type <code>type_specifier</code> (…\nReturns the node if it is of type <code>unary_expression</code> (…\nReturns the node if it is of type <code>unary_expression</code> (…\nReturns the node if it is of type <code>unary_expression</code> (…\nReturns the node if it is of type <code>unary_expression</code> (…\nReturns the node if it is of type <code>unary_expression</code> (…\nReturns the node if it is of type <code>unary_expression</code> (…\nReturns the node if it is of type <code>unary_expression</code> (…\nReturns the node if it is of type <code>unary_expression</code> (…\nReturns the node if it is of type <code>unary_expression</code> (…\nReturns the node if it is of type <code>unary_expression</code> (…\nReturns the node if it is of type <code>union_specifier</code> (…\nReturns the node if it is of type <code>union_specifier</code> (…\nReturns the node if it is of type <code>union_specifier</code> (…\nReturns the node if it is of type <code>update_expression</code> (…\nReturns the node if it is of type <code>update_expression</code> (…\nReturns the node if it is of type <code>update_expression</code> (…\nReturns the node if it is of type <code>update_expression</code> (…\nReturns the node if it is of type <code>update_expression</code> (…\nReturns the node if it is of type <code>update_expression</code> (…\nReturns the node if it is of type <code>update_expression</code> (…\nReturns the node if it is of type <code>update_expression</code> (…\nReturns the node if it is of type <code>update_expression</code> (…\nReturns the node if it is of type <code>variadic_parameter</code> (…\nReturns the node if it is of type <code>while_statement</code> (…\nReturns the node if it is of type <code>while_statement</code> (…\nReturns the node if it is of type <code>while_statement</code> (…\nReturns the node if it is of type <code>while_statement</code> (…\nReturns the node if it is of type <code>while_statement</code> (…\nReturns the node if it is of type <code>while_statement</code> (…\nGet the field <code>body</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTyped node <code>+</code>\nTyped node <code>++</code>\nTyped node <code>+=</code>\nTyped node <code>&amp;</code>\nTyped node <code>&amp;&amp;</code>\nTyped node <code>&amp;=</code>\nTyped node <code>~</code>\nTyped node <code>^</code>\nTyped node <code>^=</code>\nTyped node <code>:</code>\nTyped node <code>::</code>\nTyped node <code>,</code>\nTyped node <code>/</code>\nTyped node <code>/=</code>\nTyped node <code>.</code>\nTyped node <code>...</code>\nTyped node <code>&quot;</code>\nTyped node <code>=</code>\nTyped node <code>==</code>\nTyped node <code>&gt;</code>\nTyped node <code>&gt;=</code>\nTyped node <code>&gt;&gt;</code>\nTyped node <code>&gt;&gt;=</code>\nTyped node <code>#define</code>\nTyped node <code>#elif</code>\nTyped node <code>#elifdef</code>\nTyped node <code>#elifndef</code>\nTyped node <code>#else</code>\nTyped node <code>#endif</code>\nTyped node <code>#if</code>\nTyped node <code>#ifdef</code>\nTyped node <code>#ifndef</code>\nTyped node <code>#include</code>\nTyped node <code>{</code>\nTyped node <code>[</code>\nTyped node <code>[[</code>\nTyped node <code>L&quot;</code>\nTyped node <code>(</code>\nTyped node <code>L&#39;</code>\nTyped node <code>&lt;</code>\nTyped node <code>&lt;=</code>\nTyped node <code>&lt;&lt;</code>\nTyped node <code>&lt;&lt;=</code>\nTyped node <code>%</code>\nTyped node <code>%=</code>\nTyped node <code>*</code>\nTyped node <code>*=</code>\nTyped node <code> </code>\nTyped node <code>!</code>\nTyped node <code>!=</code>\nTyped node <code>|</code>\nTyped node <code>|=</code>\nTyped node <code>||</code>\nTyped node <code>?</code>\nTyped node <code>&#39;</code>\nTyped node <code>}</code>\nTyped node <code>]</code>\nTyped node <code>]]</code>\nTyped node <code>)</code>\nTyped node <code>;</code>\nTyped node <code>-</code>\nTyped node <code>-=</code>\nTyped node <code>-&gt;</code>\nTyped node <code>--</code>\nTyped node <code>u8&quot;</code>\nTyped node <code>u8&#39;</code>\nTyped node <code>U&quot;</code>\nTyped node <code>u&quot;</code>\nTyped node <code>U&#39;</code>\nTyped node <code>u&#39;</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTyped node <code>_Alignas</code>\nTyped node <code>alignas</code>\nTyped node <code>_Alignof</code>\nTyped node <code>__alignof</code>\nTyped node <code>__alignof__</code>\nTyped node <code>_alignof</code>\nTyped node <code>alignof</code>\nTyped node <code>__asm</code>\nTyped node <code>__asm__</code>\nTyped node <code>asm</code>\nTyped node <code>_Atomic</code>\nTyped node <code>__attribute</code>\nTyped node <code>__attribute__</code>\nTyped node <code>auto</code>\nTyped node <code>__based</code>\nTyped node <code>break</code>\nTyped node <code>case</code>\nTyped node <code>__cdecl</code>\nTyped node <code>__clrcall</code>\nTyped node <code>const</code>\nTyped node <code>constexpr</code>\nTyped node <code>continue</code>\nTyped node <code>__declspec</code>\nTyped node <code>default</code>\nTyped node <code>defined</code>\nTyped node <code>do</code>\nTyped node <code>else</code>\nTyped node <code>enum</code>\nTyped node <code>__except</code>\nTyped node <code>__extension__</code>\nTyped node <code>extern</code>\nTyped node <code>__fastcall</code>\nTyped node <code>__finally</code>\nTyped node <code>for</code>\nTyped node <code>__forceinline</code>\nTyped node <code>_Generic</code>\nTyped node <code>goto</code>\nTyped node <code>if</code>\nTyped node <code>__inline</code>\nTyped node <code>__inline__</code>\nTyped node <code>inline</code>\nTyped node <code>__leave</code>\nTyped node <code>long</code>\nTyped node <code>_Nonnull</code>\nTyped node <code>_Noreturn</code>\nTyped node <code>noreturn</code>\nTyped node <code>NULL</code>\nTyped node <code>nullptr</code>\nTyped node <code>offsetof</code>\nTyped node <code>register</code>\nTyped node <code>__restrict__</code>\nTyped node <code>restrict</code>\nTyped node <code>return</code>\nTyped node <code>short</code>\nTyped node <code>signed</code>\nTyped node <code>sizeof</code>\nTyped node <code>static</code>\nTyped node <code>__stdcall</code>\nTyped node <code>struct</code>\nTyped node <code>switch</code>\nTyped node <code>__thiscall</code>\nTyped node <code>__thread</code>\nTyped node <code>thread_local</code>\nTyped node <code>__try</code>\nTyped node <code>typedef</code>\nTyped node <code>__unaligned</code>\nTyped node <code>_unaligned</code>\nTyped node <code>union</code>\nTyped node <code>unsigned</code>\nTyped node <code>__vectorcall</code>\nTyped node <code>__volatile__</code>\nTyped node <code>volatile</code>\nTyped node <code>while</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")