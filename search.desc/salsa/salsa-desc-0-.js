searchState.loadedDescShard("salsa", 0, "Trait implemented on the struct that user annotated with …\nUpcast to a <code>dyn Database</code>.\nA panic payload indicating that execution of a salsa query …\nReturn value from a cycle recovery function.\nThe trait implemented by all Salsa databases. You can …\nDefault database implementation that you can use if you don…\nAn integer that uniquely identifies a particular query …\nTracked structs or memoized data were discarded (freed).\nDiscarded accumulated data from a given fn\nIndicates that a value was newly interned.\nIndicates that a value was interned by reusing an existing …\nIndicates that one <code>Handle</code> has set the cancellation flag. …\nIndicates that a previously interned value was read in a …\nOccurs when we found that all inputs to a memoized value …\nDescribes how likely a value is to change—how “durable…\nThe <code>Event</code> struct identifies various notable things that can\nAn enum identifying the various kinds of events that can …\nCut off iteration and use the given result value for this …\nHigh durability: things that are not expected to change …\nThe <code>Id</code> of a salsa struct in the database <code>Table</code>.\nAn ingredient index identifies a particular <code>Ingredient</code> in …\nInformation about instances of a particular Salsa …\nIterate the cycle again to look for a fixpoint.\nLow durability: things that change frequently.\nMedium durability: things that change sometimes, but …\nThe query was operating on revision R, but there is a …\nThe query was blocked on another thread, and that thread …\nA unique identifier for the current version of the …\nUsed to determine the return type and value for tracked …\nUsed to determine the return type and value for tracked …\nSetter for a field of an input.\nConcrete implementation of the <code>Database</code> trait with local …\nA handle to non-local database state.\nSafety\nIndicates that another thread (with id <code>other_thread_id</code>) is …\nIndicates that <code>unwind_if_cancelled</code> was called and salsa …\nDiscovered that a query used to output a given output but …\nIndicates that the function for this query will be …\nAccumulate an instance of this in the database for later …\nReturn a <code>u64</code> representation of this <code>Id</code>.\nUpcasts <code>self</code> to the given view.\nAttach the database to the current thread and execute <code>op</code>. …\nExecute <code>op</code> with the database in thread-local storage for …\nExecute <code>op</code> with the database in thread-local storage for …\nRuns <code>f</code>, and catches any salsa cancellation.\nReturns the number of instances of this ingredient.\nReturns the debug name of the ingredient.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the generation of this <code>Id</code>.\nReturn the index portion of this <code>Id</code>.\nReturn the “debug name” (i.e., the struct name, etc) …\nReturn the “debug name” (i.e., the struct name, etc) …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this instance of <code>Storage</code> into a <code>StorageHandle</code>.\nWhat sort of event was it.\nReturns\nCreate a new database storage.\nCreate a new database; equivalent to <code>Self::default</code>.\nReturns a new <code>Id</code> with same index, but the generation …\nReturns information about any memoized Salsa queries.\nReports that the query depends on some state unknown to …\nReports that the query depends on some state unknown to …\nReturns the total size of the fields of any instances of …\nReturns the total size of Salsa metadata of any instances …\nReturns information about any Salsa structs.\nA “synthetic write” causes the system to act <em>as though</em> …\nA “synthetic write” causes the system to act <em>as though</em> …\nThe id of the thread that triggered the event.\nEnforces current LRU limits, evicting entries if necessary.\nEnforces current LRU limits, evicting entries if necessary.\nStarts unwinding the stack if the current revision is …\nStarts unwinding the stack if the current revision is …\nAccess the “attached” database. Returns <code>None</code> if no …\nMark the <code>Id</code> with a generation.\nAccumulator that was accumulated into\nThe database-key for the affected value. Implements <code>Debug</code>.\nThe database-key for the affected value. Implements <code>Debug</code>.\nThe database-key for the affected value. Implements <code>Debug</code>.\nThe database-key for the cycle head. Implements <code>Debug</code>.\nKey for the query that is executing and which no longer …\nThe key of the fn that accumulated results\nValue being discarded.\nThe id of the thread we will block on.\nKey for the query that is no longer output")