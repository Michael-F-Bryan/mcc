searchState.loadedDescShard("type_sitter_lib", 0, "type-sitter-lib: type-sitter code for generated / …\nAn capture of this typed query (runtime capture index)\nContains the error value\nA stub node that indicates a localized parse error.\nNode is an error node\nA node that can annotate any other node, e.g. a comment.\nA node that has a single named child (besides extras) and …\nA node that has multiple named children (besides extras) …\nA node that has a single optional named child (besides …\nAn error that occurred in <code>Parser::set_included_ranges</code>.\nError when attempting to wrap a node of the wrong kind\nUnderlying cause of why the node is the wrong kind\nA summary of a change to a text document.\nThe type of the elements being iterated over.\nKind of nodes this wraps.\nAn opaque object that defines how to parse a particular …\nAn error that occurred when trying to assign an …\nA match of this typed query (runtime pattern index)\nA stub node that indicates another node was expected.\nNode is a missing node\nNever type (for the weird case when there is an accessor …\nTyped node wrapper.\nResult of attempting to wrap a node\nContains the success value\nUseful trait to unwrap an <code>Option&lt;NodeResult&lt;&#39;tree, T&gt;&gt;</code>\nNode is valid but simply of a different kind (bad …\nA stateful object that this is used to produce a tree …\nA position in a multi-line text document, in terms of rows …\nA query which can generate type-safe matches and captures, …\nThe type of query this capture came from\nThe type of query this match came from\nA capture from a <code>Query</code> with typed nodes\nIterate a query’s captures (see [RawQueryCaptures])\nWraps tree-sitter’s <code>QueryCursor</code> where <code>matches</code> and …\nA match from a <code>Query</code> with typed nodes\nCaptures from a <code>QueryMatch</code>\nIterate captures from a <code>QueryMatch</code>\nIterate a typed query’s matches (see tree-sitter’s …\nA key-value pair associated with a particular pattern in a …\nA range of positions in a multi-line text document, both …\nAn interface for dealing with streaming iterators.\nA stateful object for walking a syntax tree efficiently. …\nA node that is untyped other than being named.\nA node that is untyped, but implements <code>Node</code> anyways.\nThe same type, but with a different lifetime.\nGet the ABI version number that indicates which version of …\nThe actual kind of node that we encountered, not <code>kind</code> …\nAdvances the iterator to the next element.\nDetermines if all elements of the iterator satisfy a …\nDetermines if any elements of the iterator satisfy a …\nThe string used to generate this query\nBorrows an iterator, rather than consuming it.\nGet the byte range where this node is located\nGet the byte range where this node is located\nRun a typed query on the cursor, iterating over the …\nSee tree-sitter’s <code>QueryMatch::captures</code>\nSee tree-sitter’s <code>QueryMatch::captures</code>\nWhether the node is an error, missing, extra, or is just …\nConsumes two iterators and returns a new iterator that …\nGet the changed ranges. See …\nGets the node’s only not-extra named child, if it exists.\nGets the node’s only not-extra named child, if it exists.\nGets the node’s only not-extra named child.\nGets the node’s only not-extra named child.\nGets the node’s not-extra named children.\nGets the node’s not-extra named children.\nProduces a normal, non-streaming, iterator by cloning the …\nProduces a normal, non-streaming, iterator by copying the …\nConsumes the iterator, counting the number of remaining …\nCheck if, on its last execution, this cursor exceeded its …\nTry to downcast to the given type.\nTry to downcast to the given type.\nEdit this node to keep it in-sync with source code that …\nEdit this node to keep it in-sync with source code that …\nEdit the tree. See <code>tree_sitter::Tree::edit</code>\nGet the byte offset where this node ends\nGet the byte offset where this node ends\nGet the row and column where this node ends\nGet the row and column where this node ends\nUnwrap the <code>Option</code> and then <code>NodeResult</code>, <strong>panic</strong> with the …\nGet the number of distinct field names in this language.\nGet the numerical id for the given field name.\nGets the field name of the cursor’s current node\nGet the field name for the given numerical id.\nCreates an iterator which uses a closure to determine if …\nCreates an iterator which both filters and maps by …\nCreates a regular, non-streaming iterator which both …\nReturns the first element of the iterator that satisfies …\nCreates an iterator which flattens iterators obtained by …\nFlatten into an <code>Option</code>, with <code>None</code> if the node is present …\nReduces the iterator’s elements to a single, final value.\nCalls a closure on each element of an iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReconstructs a <code>Language</code> from a raw pointer.\nAssume that tree-sitter node is the correct kind and wrap.\nAssume that tree-sitter node is the correct kind and wrap.\nCreates an iterator which is “well behaved” at the …\nReturns a reference to the current element of the iterator.\nGet the capture at the index\nMove the cursor to the first child of the current node and …\nMove the cursor to the first child of the current node …\nMove the cursor to the first child of the current node …\nMove the cursor to the next sibling of the current node …\nMove the cursor to the parent of the current node and …\nCheck if this node has been edited\nCheck if this node has been edited\nCheck if this node represents a syntax error or contains …\nCheck if this node represents a syntax error or contains …\nGet the numeric id for the given node kind.\nGet the included ranges used to parse the tree\nGet the capture index\nGet the capture index\nGet the capture at the index. <strong>Panics</strong> if the index is out …\nCall a closure on each element, passing the element on. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDestruct into the wrapped tree-sitter node.\nDestruct into the underlying tree-sitter <code>QueryMatch</code>\nConsumes the <code>Language</code>, returning a raw pointer to the …\nChecks if <code>get()</code> will return <code>None</code>.\nAre there any captures?\nIs the actual node an error?\nIs this an error node?\nIs this an extra node?\nIs the actual node missing?\nIs this a missing node?\nCheck if this node is <em>named</em>. See tree-sitter’s …\nCheck if this node is <em>named</em>. See tree-sitter’s …\nIterate the captures\nGet this node’s tree-sitter name. See tree-sitter’s …\nGet this node’s tree-sitter name. See tree-sitter’s …\nExpected node kind\nGet the language used to parse the tree.\nGet the number of captures\nCreate a new lookahead iterator for this language and …\nCreates an iterator which transforms elements of this …\nCreates a regular, non-streaming iterator which transforms …\nCreates an iterator which transforms elements of this …\nReturn the maximum number of in-progress matches for this …\nRun a typed query on the cursor, iterating over the …\nGet the metadata for this language. This information is …\nConvert a mutable reference to a tree-sitter node into one …\nGet the capture name\nGet the name of this language. This returns <code>None</code> in older …\nGet the number of named children\nGet the number of named children\nCreate a new parser for the given language. See …\nCreate a new cursor for executing a given query.\nCreate an error for another tree-sitter node when a typed …\nWrap the tree-sitter node so that it can be used wherever …\nAdvances the iterator and returns the next value.\nGet the node’s immediate named next sibling\nGet the node’s immediate named next sibling\nGet the next parse state. Combine this with …\nGet the captured untyped node\nGets the cursor’s current node\nNode attempted to be wrapped\nGet the number of distinct node types in this language.\nGet the name of the node kind for the given numerical id.\nCheck if the node type for the given numerical id is named …\nCheck if the node type for the given numerical id is a …\nCheck if the node type for the given numerical id is …\nGet a mutable reference to the captured untyped node\nConsumes the first <code>n</code> elements of the iterator, returning …\nGet the node’s immediate parent\nGet the node’s immediate parent\nParse a byte string. See <code>tree_sitter::Parser::parse</code>\nGet the number of valid states in this language.\nReturns the index of the first element of the iterator …\nReturns any extra nodes before this one, e.g., comments.\nReturns any extra nodes before this one, e.g., comments.\nGet the node’s immediate named previous sibling\nGet the node’s immediate named previous sibling\nPrint a dot graph of the tree to the given file. See …\nThe query this capture came from\nThe query this match came from\nGet the byte range and row and column range where this …\nGet the byte range and row and column range where this …\nThe wrapped tree-sitter node.\nGet the raw tree-sitter query captures.\nThe underlying tree-sitter <code>QueryMatch</code>\nThe underlying tree-sitter <code>Query</code>\nThe wrapped tree-sitter node (mutable reference, rarely …\nConvert a reference to a tree-sitter node into one of an …\nRemove the match (honestly I don’t know what this does …\nRemove the match (honestly I don’t know what this does …\nRe-initialize the cursor to point to the given node\nCreates an iterator which returns elemens in the opposite …\nGet the root node of this tree.\nLimit captures to a byte range\nSet the range in which the query will be executed, in …\nLimit matches to a byte range\nSet the ranges of text the parser should include when …\nSet the maximum number of in-progress matches for this …\nLimit captures to a point range\nSet the range in which the query will be executed, in …\nLimit matches to a point range\nReturns the bounds on the remaining length of the iterator.\nCreates an iterator which skips the first <code>n</code> elements.\nCreates an iterator that skips initial elements matching a …\nGet the byte offset where this node starts\nGet the byte offset where this node starts\nGet the row and column where this node starts\nGet the row and column where this node starts\nGet a list of all subtype symbols for a given supertype …\nReturns any extra nodes after this one, e.g., comments.\nReturns any extra nodes after this one, e.g., comments.\nGet a list of all supertype symbols for the language.\nCreates an iterator which only returns the first <code>n</code> …\nCreates an iterator which only returns initial elements …\nPrint the node as an s-expression\nPrint the node as an s-expression\nCheck that the tree-sitter node is the correct kind, and …\nUnwrap the <code>Option</code> and then <code>NodeResult</code>, <strong>panic</strong> if either is …\nUpcast into an untyped node.\nUpcast into an untyped node.\nSee tree-sitter’s <code>Node::utf16_text</code>\nSee tree-sitter’s <code>Node::utf16_text</code>\nSee tree-sitter’s <code>Node::utf8_text</code>\nSee tree-sitter’s <code>Node::utf8_text</code>\nGet the ABI version number that indicates which version of …\nGet a cursor for this node\nGet a cursor for this node\nCreate a cursor starting at the root node\nPrint an error message for this with the source range.\nConvert a tree-sitter parser into a typed parser by …\nConvert a tree-sitter tree into a typed tree by specifying …\nWrap a tree-sitter <code>QueryCapture</code> which you know came from …\nWrap a tree-sitter <code>QueryMatch</code> which you know came from …\nWrap a reference to a tree-sitter <code>QueryMatch</code> which you …\nVersion of <code>wrap</code> for a mutable reference.\nTransmute a mutable reference, since they have the same …\nVersion of <code>wrap</code> for a mutable reference.\nVersion of <code>wrap</code> for an immutable reference.\nTransmute an immutable reference, since they have the same …\nVersion of <code>wrap</code> for an immutable reference.")