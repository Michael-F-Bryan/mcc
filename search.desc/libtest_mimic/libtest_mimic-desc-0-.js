searchState.loadedDescShard("libtest_mimic", 0, "Write your own tests and benchmarks that look and behave …\nAlways colorize output.\nCommand line arguments.\nColorize output if stdout is a tty and tests are run on …\nPossible values for the <code>--color</code> option.\nContains information about the entire test run. Is …\nIndicates that a test/benchmark has failed. Optionally …\nPossible values for the <code>--format</code> option.\nJson output\nOutput of a benchmark.\nNever colorize output.\nOne line per test. Output for humans. (default)\nOne character per test. Usefull for test suites with many …\nA single test or benchmark.\nAverage time in ns.\nCreates a benchmark with the given name and runner.\nRun benchmarks, but not tests.\nSpecifies whether or not to color the output.\nIf set, filters are matched exactly rather than by …\nExits the application with an appropriate error code (0 if …\nReturns an exit code that can be returned from <code>main</code> to …\nExits the application with error code 101 if there were …\nFilter string. Only tests which contain this string are …\nSpecifies the format of the output.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses the global CLI arguments given to the application.\nLike <code>from_args()</code>, but operates on an explicit iterator and …\nReturns whether there have been any failures.\nReturns whether this trial has been marked as <em>ignored</em>.\nRun only ignored tests.\nRun ignored and non-ignored tests.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> iff this trial is a benchmark (as opposed to …\nReturns <code>true</code> iff this trial is a test (as opposed to a …\nReturns the kind of this trial. If you have not set a …\nOnly list all tests and benchmarks.\nPath of the logfile. If specified, everything will be …\nReturns the message of this instance.\nReturns the name of this trial.\nNo-op, ignored (libtest-mimic always runs in no-capture …\nNumber of failed tests and benchmarks.\nNumber of tests and benchmarks that were filtered out …\nNumber of ignored tests and benchmarks.\nNumber of benchmarks that successfully ran.\nNumber of passed tests.\nIf set, display only one character per test instead of one …\nRuns all given trials (tests &amp; benchmarks).\nNo-op, ignored. libtest-mimic does not currently capture …\nA list of filters. Tests whose names contain parts of any …\nCreates a (non-benchmark) test with the given name and …\nRun tests, but not benchmarks.\nNumber of threads used for parallel testing.\nNo-op, ignored. Flag only exists for CLI compatibility …\nVariance in ns.\nSets whether or not this test is considered “ignored”. …\nSets the “kind” of this test/benchmark. If this string …\nCreates an instance without message.")