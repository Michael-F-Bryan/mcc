searchState.loadedDescShard("mcc", 0, "Michael’s C Compiler — core library\nAn adapter that lets you serialize a <code>salsa</code> type (e.g. from …\nA reference-counted string.\nTurn an assembly file into object code.\nCompile Three Address Code to Assembly.\nCommon error codes used across the compiler.\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLower from an Abstract Syntax Tree to Three Address Code.\nParse a C program into an abstract syntax tree.\nRun the C preprocessor on the given input.\nRender a set of assembly instructions as a string.\nAssembly instructions.\nCompile a parsed C program into assembly.\nAllocate <code>n</code> bytes on the stack.\nApply a binary operator to two operands.\nSign-extend the value from <code>EAX</code> into <code>EDX</code>.\nCompare two operands and set flags.\nDivide <code>EAX</code> by <code>src</code>, storing the quotient in <code>EAX</code> and the …\nA constant value.\nJump to a label.\nJump to a label if the condition is not zero.\nJump to a label if the condition is zero.\nA label.\nMove a value from one operand to another.\nAn operand is a value that can be used in an instruction.\nA named register.\nReturn from the current function.\nSomewhere on the stack, as a byte offset from <code>%rbp</code>.\nApply a unary operator to an operand.\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll error codes.\nThe error codes definition, as YAML.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe parser expected a token but found none.\nThe parser encountered an unexpected token.\nThis part of the type checker isn’t implemented.\nA newtype wrapper around <code>Diagnostic</code> that is used to …\nAn optional code that identifies this diagnostic.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSource labels that describe the cause of the diagnostic. …\nThe main message associated with this diagnostic.\nNotes that are associated with the primary cause of the …\nThe overall severity of the diagnostic\nLower an Abstract Syntax Tree to our Three Address Code …\nThree Address Code intermediate representation.\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")