// Generated by `error_codes`. DO NOT EDIT!

//! Common error codes used across the compiler.
#![allow(non_upper_case_globals)]
use codespan_reporting::diagnostic::Severity;
#[derive(Debug, Clone, PartialEq, Eq, Ord, PartialOrd, Hash)]
pub struct ErrorCode {
    pub segments: &'static [&'static str],
    pub severity: Severity,
    pub description: &'static str,
}
impl std::fmt::Display for ErrorCode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        for (i, segment) in self.segments.iter().enumerate() {
            if i > 0 {
                write!(f, "::")?;
            }
            write!(f, "{}", segment)?;
        }
        Ok(())
    }
}
/// All error codes.
pub const ALL: &[ErrorCode] = &[
    parse::missing_token,
    parse::unexpected_token,
    type_check::unimplemented,
];
/// The error codes definition, as YAML.
pub const DEFINITION: &str = include_str!(
    concat!(env!("CARGO_MANIFEST_DIR"), "/error-codes.yaml")
);
pub mod parse {
    use super::*;
    ///The parser expected a token but found none.
    pub const missing_token: ErrorCode = ErrorCode {
        segments: &["parse", "missing_token"],
        severity: Severity::Error,
        description: "The parser expected a token but found none.",
    };
    ///The parser encountered an unexpected token.
    pub const unexpected_token: ErrorCode = ErrorCode {
        segments: &["parse", "unexpected_token"],
        severity: Severity::Error,
        description: "The parser encountered an unexpected token.",
    };
}
pub mod type_check {
    use super::*;
    ///This part of the type checker isn't implemented.
    pub const unimplemented: ErrorCode = ErrorCode {
        segments: &["type_check", "unimplemented"],
        severity: Severity::Bug,
        description: "This part of the type checker isn't implemented.",
    };
}
